#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_SampleTactContract.headers.fc";
#include "sample_SampleTactContract.stdlib.fc";
#include "sample_SampleTactContract.constants.fc";
#include "sample_SampleTactContract.storage.fc";

;;
;; Contract SampleTactContract functions
;;

(slice, int, int) $SampleTactContract$_contract_init(slice $owner, int $seq) impure inline_ref {
    var (($self'owner, $self'counter, $self'seqno)) = (null(), null(), null());
    $self'owner = $owner;
    $self'counter = 0;
    $self'seqno = $seq;
    return ($self'owner, $self'counter, $self'seqno);
}

((slice, int, int), ()) $SampleTactContract$_fun_add((slice, int, int) $self, int $v) impure inline_ref {
    var (($self'owner, $self'counter, $self'seqno)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    $self'counter = ($self'counter + $v);
    return (($self'owner, $self'counter, $self'seqno), ());
}

((slice, int, int), ()) $SampleTactContract$_fun_minus((slice, int, int) $self, int $v) impure inline_ref {
    var (($self'owner, $self'counter, $self'seqno)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    $self'counter = ($self'counter - $v);
    return (($self'owner, $self'counter, $self'seqno), ());
}

((slice, int, int), ()) $SampleTactContract$_fun_multiply((slice, int, int) $self, int $v) impure inline_ref {
    var (($self'owner, $self'counter, $self'seqno)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    $self'counter = ($self'counter * $v);
    return (($self'owner, $self'counter, $self'seqno), ());
}

((slice, int, int), ()) $SampleTactContract$_fun_divide((slice, int, int) $self, int $v) impure inline_ref {
    var (($self'owner, $self'counter, $self'seqno)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(62454, ($v != 0));
    $self'counter = ($self'counter / $v);
    return (($self'owner, $self'counter, $self'seqno), ());
}

((slice, int, int), int) $SampleTactContract$_fun_counter((slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'counter, $self'seqno)) = $self;
    return (($self'owner, $self'counter, $self'seqno), $self'counter);
}

((slice, int, int), int) $SampleTactContract$_fun_getter((slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'counter, $self'seqno)) = $self;
    return (($self'owner, $self'counter, $self'seqno), $self'counter);
}

;;
;; Receivers of a Contract SampleTactContract
;;

(((slice, int, int)), ()) $SampleTactContract$_internal_binary_Add((slice, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'counter, $self'seqno) = $self;
    var ($msg'amount) = $msg;
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_add($msg'amount);
    return (($self'owner, $self'counter, $self'seqno), ());
}

(((slice, int, int)), ()) $SampleTactContract$_internal_binary_Minus((slice, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'counter, $self'seqno) = $self;
    var ($msg'amount) = $msg;
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_minus($msg'amount);
    return (($self'owner, $self'counter, $self'seqno), ());
}

(((slice, int, int)), ()) $SampleTactContract$_internal_binary_Multiply((slice, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'counter, $self'seqno) = $self;
    var ($msg'amount) = $msg;
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_multiply($msg'amount);
    return (($self'owner, $self'counter, $self'seqno), ());
}

(((slice, int, int)), ()) $SampleTactContract$_internal_binary_Divide((slice, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'counter, $self'seqno) = $self;
    var ($msg'amount) = $msg;
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_divide($msg'amount);
    return (($self'owner, $self'counter, $self'seqno), ());
}

((slice, int, int), ()) $SampleTactContract$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae((slice, int, int) $self) impure inline {
    var ($self'owner, $self'counter, $self'seqno) = $self;
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_add(1);
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_reply(__gen_cell_comment_3e96a74bf6f672d7e00d5d9c31c1437327e624b173365dc10e024c6410eff184());
    return (($self'owner, $self'counter, $self'seqno), ());
}

((slice, int, int), ()) $SampleTactContract$_internal_text_85915b1bf5943fd2853bb660338acacfae39d1f735549cef922255a9945acc3e((slice, int, int) $self) impure inline {
    var ($self'owner, $self'counter, $self'seqno) = $self;
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_minus(1);
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_reply(__gen_cell_comment_cef66999b58b98d2927b2b02a3a10ae193d666854757897dd911aeabf5224c09());
    return (($self'owner, $self'counter, $self'seqno), ());
}

(((slice, int, int)), ()) $SampleTactContract$_internal_binary_Deploy((slice, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'counter, $self'seqno) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'counter, $self'seqno)~$SampleTactContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'counter, $self'seqno), ());
}

;;
;; Get methods of a Contract SampleTactContract
;;

_ %counter() method_id(104984) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_counter();
    return res;
}

_ %getter() method_id(101268) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_getter();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmZjwRR3TDXrmv6Hx2b5yWdXuA2GFQATe8bCqEPBopKULD";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleTactContract
;;

((slice, int, int), int) $SampleTactContract$_contract_router_internal((slice, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Add message
    if (op == 2278832834) {
        var msg = in_msg~$Add$_load();
        self~$SampleTactContract$_internal_binary_Add(msg);
        return (self, true);
    }
    
    ;; Receive Minus message
    if (op == 2759561417) {
        var msg = in_msg~$Minus$_load();
        self~$SampleTactContract$_internal_binary_Minus(msg);
        return (self, true);
    }
    
    ;; Receive Multiply message
    if (op == 2185829316) {
        var msg = in_msg~$Multiply$_load();
        self~$SampleTactContract$_internal_binary_Multiply(msg);
        return (self, true);
    }
    
    ;; Receive Divide message
    if (op == 2091152479) {
        var msg = in_msg~$Divide$_load();
        self~$SampleTactContract$_internal_binary_Divide(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SampleTactContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "increment" message
        if (text_op == 0xc4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae) {
            self~$SampleTactContract$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae();
            return (self, true);
        }
        
        ;; Receive "decrement" message
        if (text_op == 0x85915b1bf5943fd2853bb660338acacfae39d1f735549cef922255a9945acc3e) {
            self~$SampleTactContract$_internal_text_85915b1bf5943fd2853bb660338acacfae39d1f735549cef922255a9945acc3e();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleTactContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleTactContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SampleTactContract$_contract_store(self);
}
